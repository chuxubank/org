#+title: Inbox
#+OPTIONS: toc:nil author:nil date:nil prop:t p:t

* KILL 自动打开特斯拉 Wi-Fi
SCHEDULED: <2025-04-27 Sun>
* TODO Blog
https://github.com/chuxubank/chuxubank.github.io
SCHEDULED: <2025-02-17 Mon>
** TODO GPG 相关密钥导出为 QR
*** Android
#+begin_src sh
  gpg --import --pinentry-mode=loopback ~/storage/downloads/secret-keys.pgp
#+end_src
** IDEA 打印邮箱中的发票
可以使用 mu4e 进行筛选（正则）
然后定义 ~mu4e-attachment-dir~ 到对应的文件夹
然后 ~C-u mu4e-view-save-attachments~ 保存附件
** IDEA Chezmoi manage macOS Preferences
#+begin_src sh
  set -e
  TMPFILE=$(mktemp)
  trap "cat $TMPFILE; rm $TMPFILE" EXIT

  function pl() {
      CURRENT=$(plutil -extract $1 raw $TMPFILE 2>/dev/null || :)
      if [ "$CURRENT" != "$3" ]; then
          plutil -replace $* "$TMPFILE"
      fi
  }

  cat <&0 >$TMPFILE

  if [ ! -s $TMPFILE ]; then
      plutil -create binary1 $TMPFILE
  fi
#+end_src
** DONE Theme
CLOSED: [2025-04-22 Tue 14:15] SCHEDULED: <2025-04-21 Mon>
- State "DONE"       from "TODO"       [2025-04-22 Tue 14:15]
Use hugo module

** PDF 扫描
- Note taken on [2025-04-22 Tue 16:01] \\
  https://x.com/digitalychee/status/1914556025170223371?s=46&t=hN2xsAOqv7K2si8OImIqAw
* TODO 加速 Notion
#+begin_src js
  /* CONFIGURATION STARTS HERE */

  /* Step 1: enter your domain name like fruitionsite.com */
  const MY_DOMAIN = 'notion.asahiart.tech';

  /*
   ,* Step 2: enter your URL slug to page ID mapping
   ,* The key on the left is the slug (without the slash)
   ,* The value on the right is the Notion page ID
   ,*/
  const SLUG_TO_PAGE = {
    '': '1da662f60b858040bef9d928beb6d284',
  };

  /* Step 3: enter your page title and description for SEO purposes */
  const PAGE_TITLE = '';
  const PAGE_DESCRIPTION = '';

  /* Step 4: enter a Google Font name, you can choose from https://fonts.google.com */
  const GOOGLE_FONT = '';

  /* Step 5: enter any custom scripts you'd like */
  const CUSTOM_SCRIPT = ``;

  /* CONFIGURATION ENDS HERE */

  const PAGE_TO_SLUG = {};
  const slugs = [];
  const pages = [];
  Object.keys(SLUG_TO_PAGE).forEach(slug => {
    const page = SLUG_TO_PAGE[slug];
    slugs.push(slug);
    pages.push(page);
    PAGE_TO_SLUG[page] = slug;
  });

  addEventListener('fetch', event => {
    event.respondWith(fetchAndApply(event.request));
  });

  function generateSitemap() {
    let sitemap = '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">';
    slugs.forEach(
      (slug) =>
      (sitemap +=
       '<url><loc>https://' + MY_DOMAIN + '/' + slug + '</loc></url>')
    );
    sitemap += '</urlset>';
    return sitemap;
  }

  const corsHeaders = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Methods': 'GET, HEAD, POST, PUT, OPTIONS',
    'Access-Control-Allow-Headers': 'Content-Type',
  };

  function handleOptions(request) {
    if (request.headers.get('Origin') !== null &&
        request.headers.get('Access-Control-Request-Method') !== null &&
        request.headers.get('Access-Control-Request-Headers') !== null) {
      // Handle CORS pre-flight request.
      return new Response(null, {
        headers: corsHeaders
      });
    } else {
      // Handle standard OPTIONS request.
      return new Response(null, {
        headers: {
          'Allow': 'GET, HEAD, POST, PUT, OPTIONS',
        }
      });
    }
  }

  async function fetchAndApply(request) {
    if (request.method === 'OPTIONS') {
      return handleOptions(request);
    }
    let url = new URL(request.url);
    url.hostname = 'www.notion.so';
    if (url.pathname === '/robots.txt') {
      return new Response('Sitemap: https://' + MY_DOMAIN + '/sitemap.xml');
    }
    if (url.pathname === '/sitemap.xml') {
      let response = new Response(generateSitemap());
      response.headers.set('content-type', 'application/xml');
      return response;
    }
    let response;
    if (url.pathname.startsWith('/app') && url.pathname.endsWith('js')) {
      response = await fetch(url.toString());
      let body = await response.text();
      response = new Response(body.replace(/www.notion.so/g, MY_DOMAIN).replace(/notion.so/g, MY_DOMAIN), response);
      response.headers.set('Content-Type', 'application/x-javascript');
      return response;
    } else if ((url.pathname.startsWith('/api'))) {
      // Forward API
      response = await fetch(url.toString(), {
        body: url.pathname.startsWith('/api/v3/getPublicPageData') ? null : request.body,
        headers: {
          'content-type': 'application/json;charset=UTF-8',
          'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36'
        },
        method: 'POST',
      });
      response = new Response(response.body, response);
      response.headers.set('Access-Control-Allow-Origin', '*');
      return response;
    } else if (slugs.indexOf(url.pathname.slice(1)) > -1) {
      const pageId = SLUG_TO_PAGE[url.pathname.slice(1)];
      return Response.redirect('https://' + MY_DOMAIN + '/' + pageId, 301);
    } else {
      response = await fetch(url.toString(), {
        body: request.body,
        headers: request.headers,
        method: request.method,
      });
      response = new Response(response.body, response);
      response.headers.delete('Content-Security-Policy');
      response.headers.delete('X-Content-Security-Policy');
    }

    return appendJavascript(response, SLUG_TO_PAGE);
  }

  class MetaRewriter {
    element(element) {
      if (PAGE_TITLE !== '') {
        if (element.getAttribute('property') === 'og:title'
            || element.getAttribute('name') === 'twitter:title') {
          element.setAttribute('content', PAGE_TITLE);
        }
        if (element.tagName === 'title') {
          element.setInnerContent(PAGE_TITLE);
        }
      }
      if (PAGE_DESCRIPTION !== '') {
        if (element.getAttribute('name') === 'description'
            || element.getAttribute('property') === 'og:description'
            || element.getAttribute('name') === 'twitter:description') {
          element.setAttribute('content', PAGE_DESCRIPTION);
        }
      }
      if (element.getAttribute('property') === 'og:url'
          || element.getAttribute('name') === 'twitter:url') {
        element.setAttribute('content', MY_DOMAIN);
      }
      if (element.getAttribute('name') === 'apple-itunes-app') {
        element.remove();
      }
    }
  }

  class HeadRewriter {
    element(element) {
      if (GOOGLE_FONT !== '') {
        element.append(`<link href="https://fonts.googleapis.com/css?family=${GOOGLE_FONT.replace(' ', '+')}:Regular,Bold,Italic&display=swap" rel="stylesheet">
          <style>* { font-family: "${GOOGLE_FONT}" !important; }</style>`, {
            html: true
          });
      }
      element.append(`<style>
        div.notion-topbar > div > div:nth-child(3) { display: none !important; }
        div.notion-topbar > div > div:nth-child(4) { display: none !important; }
        div.notion-topbar > div > div:nth-child(5) { display: none !important; }
        div.notion-topbar > div > div:nth-child(6) { display: none !important; }
        div.notion-topbar-mobile > div:nth-child(3) { display: none !important; }
        div.notion-topbar-mobile > div:nth-child(4) { display: none !important; }
        div.notion-topbar > div > div:nth-child(1n).toggle-mode { display: block !important; }
        div.notion-topbar-mobile > div:nth-child(1n).toggle-mode { display: block !important; }
        </style>`, {
          html: true
        })
    }
  }

  class BodyRewriter {
    constructor(SLUG_TO_PAGE) {
      this.SLUG_TO_PAGE = SLUG_TO_PAGE;
    }
    element(element) {
      element.append(`<div style="display:none">Powered by <a href="http://fruitionsite.com">Fruition</a></div>
        <script>
        window.CONFIG.domainBaseUrl = 'https://${MY_DOMAIN}';
        const SLUG_TO_PAGE = ${JSON.stringify(this.SLUG_TO_PAGE)};
        const PAGE_TO_SLUG = {};
        const slugs = [];
        const pages = [];
        const el = document.createElement('div');
        let redirected = false;
        Object.keys(SLUG_TO_PAGE).forEach(slug => {
          const page = SLUG_TO_PAGE[slug];
          slugs.push(slug);
          pages.push(page);
          PAGE_TO_SLUG[page] = slug;
        });
        function getPage() {
          return location.pathname.slice(-32);
        }
        function getSlug() {
          return location.pathname.slice(1);
        }
        function updateSlug() {
          const slug = PAGE_TO_SLUG[getPage()];
          if (slug != null) {
            history.replaceState(history.state, '', '/' + slug);
          }
        }
        function onDark() {
          el.innerHTML = '<div title="Change to Light Mode" style="margin-left: auto; margin-right: 14px; min-width: 0px;"><div role="button" tabindex="0" style="user-select: none; transition: background 120ms ease-in 0s; cursor: pointer; border-radius: 44px;"><div style="display: flex; flex-shrink: 0; height: 14px; width: 26px; border-radius: 44px; padding: 2px; box-sizing: content-box; background: rgb(46, 170, 220); transition: background 200ms ease 0s, box-shadow 200ms ease 0s;"><div style="width: 14px; height: 14px; border-radius: 44px; background: white; transition: transform 200ms ease-out 0s, background 200ms ease-out 0s; transform: translateX(12px) translateY(0px);"></div></div></div></div>';
          document.body.classList.add('dark');
          __console.environment.ThemeStore.setState({ mode: 'dark' });
        };
        function onLight() {
          el.innerHTML = '<div title="Change to Dark Mode" style="margin-left: auto; margin-right: 14px; min-width: 0px;"><div role="button" tabindex="0" style="user-select: none; transition: background 120ms ease-in 0s; cursor: pointer; border-radius: 44px;"><div style="display: flex; flex-shrink: 0; height: 14px; width: 26px; border-radius: 44px; padding: 2px; box-sizing: content-box; background: rgba(135, 131, 120, 0.3); transition: background 200ms ease 0s, box-shadow 200ms ease 0s;"><div style="width: 14px; height: 14px; border-radius: 44px; background: white; transition: transform 200ms ease-out 0s, background 200ms ease-out 0s; transform: translateX(0px) translateY(0px);"></div></div></div></div>';
          document.body.classList.remove('dark');
          __console.environment.ThemeStore.setState({ mode: 'light' });
        }
        function toggle() {
          if (document.body.classList.contains('dark')) {
            onLight();
          } else {
            onDark();
          }
        }
        function addDarkModeButton(device) {
          const nav = device === 'web' ? document.querySelector('.notion-topbar').firstChild : document.querySelector('.notion-topbar-mobile');
          el.className = 'toggle-mode';
          el.addEventListener('click', toggle);
          nav.appendChild(el);
          onLight();
        }
        const observer = new MutationObserver(function() {
          if (redirected) return;
          const nav = document.querySelector('.notion-topbar');
          const mobileNav = document.querySelector('.notion-topbar-mobile');
          if (nav && nav.firstChild && nav.firstChild.firstChild
            || mobileNav && mobileNav.firstChild) {
            redirected = true;
            updateSlug();
            addDarkModeButton(nav ? 'web' : 'mobile');
            const onpopstate = window.onpopstate;
            window.onpopstate = function() {
              if (slugs.includes(getSlug())) {
                const page = SLUG_TO_PAGE[getSlug()];
                if (page) {
                  history.replaceState(history.state, 'bypass', '/' + page);
                }
              }
              onpopstate.apply(this, [].slice.call(arguments));
              updateSlug();
            };
          }
        });
        observer.observe(document.querySelector('#notion-app'), {
          childList: true,
          subtree: true,
        });
        const replaceState = window.history.replaceState;
        window.history.replaceState = function(state) {
          if (arguments[1] !== 'bypass' && slugs.includes(getSlug())) return;
          return replaceState.apply(window.history, arguments);
        };
        const pushState = window.history.pushState;
        window.history.pushState = function(state) {
          const dest = new URL(location.protocol + location.host + arguments[2]);
          const id = dest.pathname.slice(-32);
          if (pages.includes(id)) {
            arguments[2] = '/' + PAGE_TO_SLUG[id];
          }
          return pushState.apply(window.history, arguments);
        };
        const open = window.XMLHttpRequest.prototype.open;
        window.XMLHttpRequest.prototype.open = function() {
          arguments[1] = arguments[1].replace('${MY_DOMAIN}', 'www.notion.so');
          return open.apply(this, [].slice.call(arguments));
        };
      </script>${CUSTOM_SCRIPT}`, {
        html: true
      });
    }
  }

  async function appendJavascript(res, SLUG_TO_PAGE) {
    return new HTMLRewriter()
      .on('title', new MetaRewriter())
      .on('meta', new MetaRewriter())
      .on('head', new HeadRewriter())
      .on('body', new BodyRewriter(SLUG_TO_PAGE))
      .transform(res);
  }
#+end_src
* TODO Build online agenda
SCHEDULED: <2025-04-28 Mon>
* TODO 学习 Rust
SCHEDULED: <2025-05-03 Sat>
* DONE 洗胶片
SCHEDULED: <2025-03-02 Sun>
** DONE 带一次性相机
CLOSED: [2025-02-23 Sun 11:18] SCHEDULED: <2025-02-23 Sun>
- State "DONE"       from "TODO"       [2025-02-23 Sun 11:18]

* TODO 重构 Ansible
SCHEDULED: <2025-02-13 Thu>
:PROPERTIES:
:TRIGGER:  next-sibling scheduled!("++0d")
:END:
https://github.com/IronicBadger/ansible-role-docker-compose-generator
* TODO Setup new VPS
:PROPERTIES:
:TRIGGER: next-sibling scheduled!("++0d")
:END:
:LOGBOOK:
CLOCK: [2024-12-26 Thu 17:45]--[2024-12-26 Thu 19:45] =>  2:00
:END:
https://bandwagonhost.com/services
* TODO Setup OpenWrt
:PROPERTIES:
:TRIGGER: next-sibling scheduled!("++0d")
:END:
* TODO 使用 Ansible 优化 HomeLab
:PROPERTIES:
:TRIGGER:  next-sibling scheduled!("++0d")
:END:
https://docs.ansible.com/ansible/latest/collections/community/general/proxmox_kvm_module.html
https://pve.proxmox.com/wiki/Proxmox_VE_API#API_URL
https://openwrt.org/docs/guide-user/additional-software/opkg
* TODO Conventions
- https://keepachangelog.com/
- https://semver.org/
- https://www.conventionalcommits.org/
* TODO 皮肤科复诊
* TODO IPTV
SCHEDULED: <2025-05-03 Sat>
- Note taken on [2024-04-05 Fri 06:52] \\
  https://github.com/lizongying/my-tv
* TODO 基于 TrueNAS 搭建 nextCloud 私有云
:PROPERTIES:
:TRIGGER:  next-sibling scheduled!("++0d")
:END:
* TODO 整理 Download 文件夹
:PROPERTIES:
:BLOCKER:  previous-sibling
:END:
* TODO Bitcoin Whitepaper
* TODO 刷算法题
SCHEDULED: <2025-05-03 Sat>
https://github.com/yangshun/tech-interview-handbook
* TODO 学习日语
* TODO 国际驾照
* TODO 婚礼筹备 [0/6]
DEADLINE: <2025-05-01 Thu>
** TODO 人员安排
SCHEDULED: <2025-04-01 Tue>
*** TODO 游戏人员安排
SCHEDULED: <2025-04-27 Sun>
- [ ] 投沙包
- [ ] 套圈
- [ ] 扔大色子
** TODO 大屏幕 U 盘
SCHEDULED: <2025-04-28 Mon>
- [ ] 歌曲伴奏
- [ ] 相片
- [ ] 当日预览视频
*** TODO 回收 U 盘
SCHEDULED: <2025-05-02 Fri 20:00>
** TODO 礼品
*** DONE 上台演出礼品
SCHEDULED: <2025-04-09 Wed>
*** TODO 书签
**** STRT 书写书签
SCHEDULED: <2025-04-22 Tue>
灰：喜洋洋、乐陶陶、福满门、欢天喜地、乐无穷、喜盈盈、福满堂、乐融融、春风得意、吉星高照
绿：好运来、喜连连、福满绿、喜事多、生意旺、春满园、财源滚滚、乐无边、幸福到、喜盈盈
白：一帆风顺、白头偕老、雪兆丰年、玉洁冰清、云开见喜、清风拂面、明月当空、雪中送炭、玉润冰肌、白露为霜
金：招财进宝、财源广进、日进斗金、金玉满堂、黄金万两、金榜题名、富贵盈门、金光闪闪、铸就辉煌、富甲一方
栗：稳稳当当、脚踏实地、厚德载物、春华秋实、秋实迎丰、大地回春、丰收在望、根深叶茂、硕果累累、栗香盈屋
橙：心想事橙、甜甜蜜蜜、橙意浓、朝阳初照、橙光普照、橙香满屋、喜气橙天、橙梦成真、活力迸发、暖意融融
黄：五福临门、吉星高照、黄金时代、花开富贵、阳光灿烂、谷穗飘香、向阳花开、麦浪金黄、喜庆有余、芥子成金
红：喜上眉梢、红红火火、盛世良缘、合家欢乐、锦上添花、心花怒放、鸾凤和鸣、百年好合、喜气洋洋、花开并蒂
棕：坚韧不拔、波澜不惊、厚积薄发、笃志前行、守正出奇、稳扎稳打、砥砺前行、守护初心、功成名就、持之以恒
蓝：海阔天空、如鱼得水、乘风破浪、风调雨顺、云开见月、碧海青天、心旷神怡、蓝天白云、蓝图大展、晴空万里
***** DONE 购买书签
SCHEDULED: <2025-04-20 Sun>
** TODO 服装
*** TODO 拿绣合（放一套到朱老师家）
SCHEDULED: <2025-05-01 Thu>
*** TODO 男士服装 [5/6]
**** DONE 西装
**** DONE 领带
**** DONE 皮鞋
SCHEDULED: <2025-04-13 Sun>
**** TODO 拿西服
SCHEDULED: <2025-05-01 Thu>
**** DONE 衬衫
**** DONE 大衣
*** TODO 女士服装 [1/2]
**** DONE Jimmy Choo
SCHEDULED: <2025-04-13 Sun>
**** TODO 拿婚纱
SCHEDULED: <2025-05-01 Thu>
** TODO 新郎新娘发言稿誓词
SCHEDULED: <2025-04-30 Wed>
** TODO 家庭布置
SCHEDULED: <2025-04-27 Sun>
